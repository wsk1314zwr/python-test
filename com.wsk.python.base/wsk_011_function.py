# coding=utf-8
"""
1. 函数是标识符，故命名需要满足标识符的规则，标识符(变量、函数名称)由字母、下划线、数字组成、但是数字不能开头，不能与关键字重名
2. 主程序在调用函数时，函数调用必须是在定义之前，不然解释器无法解释，但是函数与函数间的调用无所谓顺序
3. 函数的前后都需要有两行空行
4. 函数的注释是写在方法内部的
5. 函数和方法区别，首先二者的功能是及其相似的，但是函数直接通过函数名称调用，方法需要对象.方法名称调用
6. python的内置函数：即不需要引入包即可使用，len、del、max、min、cmp
7. 函数在入参、出参，传递的都是引用，非值，肯定是这样，不然每次调用函数就会需要生成新的对象，java也是如此
8. 函数定义是可以定义参数的默认值，如def xxx(a, b=Flase),定义默认参数后，后续不能出现非默认参数，调用有多个默认参数的函数时，想给
    某个缺省参数传递数据，可以通过变量名=xx进行区分
9. 函数定义时可以定义多值参数，py中有两种多值参数，*变量名，用于将多参数接受为一个元组 ，**变量名用于将多参数接受为一个字典，
    生产规范使用 *args **kwargs，如 def xxx(a，*args, **kwargs),调用方式xxx(1,1,"2",3,4,5,"小明"=2，9="东升大厦")
10. 将元组或者字段传递多值参数需要 解包，方式 *元组、**字典
"""
def sum_number(num1):
    """给参数添加注释
    :param num1: 1
    :param num2: 2
    :return:
    """
    if num1 <= 0:
        return 0
    return num1 + sum_number(num1 - 1)


def print_info(*args, **kwargs):
    for a in args:
        print(a)
    for b in kwargs:
        print(b)


def main():
    sum = sum_number(100)


print(sum)
print("-" * 50)

print("--------------内置函数-----------")
a = [1, 2, 3, 6, 7, 8]
del a[0]  # 关键字和函数效果一致
del (a[0])
print(a)
# print(cmp("2", "3"))  # 可以直接使用比较运算符进行比较，字典无法比较大小，max、min 可以比较字典，比较的是字典的key
print_info(*(1, 2, 3), **{"name": "小明",
                          "age": 18})
if __name__ == "__main__":  # 是当前执行的程序，__name__ 是__main__, 若是被当模块被导入 __name__为当前模块名称，这样就完美解决了模块非方法函数被运行的问题
    main()
